*** Everything in python is Object ***
*** Every object contains methods ****


number
--------
number can be integer or decimal or octal or hexa.

a = 10
aval = 34.3

string
-------
string is defined in single or double or triple quotes.

aname = 'python programming'
bname = "unix shell scripting"
cname = """scala programming"""
print(cname)


list ( array in C)
------
list contains set of elements.
Elements can be numbers or strings or any combination.
list elements are defined in [].

alist = [10,20,30,40]
blist = ["unix","java","spark"]
clist = [10,34.3,"java","unix"]
print(alist)
print(blist,clist)



tuple ( read only , immutable , unchangeable )
-------
tuple contains set of elements.
Elements can be numbers or strings or any combination.
tuple elements are defined in ().
****** Elements inside tuple CANNOT be modified directly *******

atup = (10,20,30,40,23,4)
btup = ("java","unix","oracle")
ctup = (10,4.34,"java")


dictionary ( json , hash )
------------------------
dictionary contains elements in the form of keys and values.
dictionary elements are defined in {}.
In dictionary.. key can be number or string used to identify the value
              value can be number or string or list or tuple or dictionary
                           or any other complex structure.

syntax:   object = { key:value , key:value , key:value }
example:    book = {"chap1":10 ,"chap2":20 ,"chap3":30}
            data = {1:2,3:4,5:6}
            data = {1:"Unix",3:"Java"}
        bookinfo = {"chap1":[10,"Rita","UK"] ,"chap2":[20,"Ram","US"]} 



set
-----
set is UNORDERED collection of UNIQUE elements of SAME type.
set elements are defined in {}.


aset = {10,10,20,30,30}
bset = {30,30,30,30,40,50}


comments in python
--------------------

single line comment
# this is the single line comment


multi line comment
--------------------
'''
all these 
lines
are commented
'''


employees = [('Ram','1-1-90','M'),('Rao','2-2-'98','M')]


employees = [['Ram','1-1-90','M'],['Rao','2-2-'98','M']]


There are 2 types of functions
- builtin functions
- user defined functions


- builtin functions    (    dir(__builtin__)   ---> builtin functions  
------------------------
print()
len()
range()
input()
type()
isinstance()
id()
round()
chr()
ord()

int()
float()
str()
list()
tuple()
dict()
set()
oct()
hex()

operators
-------------


arithmetic operators :  
------------------------
+ - % / *


assignment operators ( ++ and -- are NOT allowed in python )
--------------------

val = 10
val = val + 1   or   val+=1       val++( not allowed)
val = val -1    or   val-=1       val-- ( not allowed)


relational operators
------------------------
<    <=    >    >=   

== ( equal to)
!=(not equal to)


if  val != 10 :
    print("do something")

if val == 10:
     print("do something")

logical operators
-------------------
and
or
not

name = "python"
if name.islower() and len(name) == 6:
     print("True")


if not name.lower():
     print("string is upper")

special operators
-------------------

+ : concatenation 
* : repetition 
in:
as






























file handling
---------------


working with flat files ( csv  txt conf log dat  .prop  )
-----------------------

opening the file
----------------
syntax:    object = open(filename,mode)
example:      fr= open("languages.txt","r")  -----> read operation
              case1: If the file is existing ... file gets opened in read mode
              case2: If the file is not existing...


              fw= open("languages.txt","w")  -----> write operation
              case1: if the file is not existing.. file gets created first
              case1: if the file is existing...data gets erased first and 
                                                it writes the data.


              fa= open("languages.txt","a")  -----> append operation



closing the file
---------------
fr.close()


different ways of reading the file
----------------------------------

- reading line by line using file object
- fobj.read()
- fobj.readlines()
- using csv library
- using pandas library













exception handling
----------------------
There are 2 types of errors.

-syntax error
-semantic error or runtime error or logical error

Handling the exceptions in runtime is known as exception handling.

try
except
else
finally













working with third party files ( xlsx docx pptx pdf mp3 mp4 ,zip,rar )








libraries
----------


builtin libraries
-------------------
builtin libraries which are generally used(math operations, sytem operations,string operations , email operations .....) comes along with python


third party libraries
--------------------
Depending on the requirement( cloud automation, network automations, ML, data analytics ....) developer has to instal third party library from

- downloading manually from www.pypi.org  and installing it
- automation installation using pip tool

mysql steps
--------------

check all existing databases
------------------------------
show databases;

create your database
--------------------
create database cdkglobal;

access your database
---------------------
use cdkglobal;

creating table
--------------
create table realestate( street varchar(100) , city varchar(100) );

inserting records
-----------------
insert into realestate values('Kondapur','Hyderabad');
insert into realestate values('HitechCity','Hyderabad');

displaying all the records
---------------------
select * from realestate;























